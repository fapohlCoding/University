package clone_cloneable;

import util.List;

/**
 * Created by FaPohl on 24.05.2018
 */
public class ListGeneric<A> implements Cloneable{

	/*Ein spezielles Interface ist das Interface Cloneable. Dies dient dazu, eine exakte Kopie von einem Objekt zu erstellen*/
   private List l;

   /**
    * New empty List
    */
   public ListGeneric() {
      l = new List();
   }

   /**
    * Determines if the List is empty or not.
    *
    * @return true, if the List is empty
    */
   public boolean empty() {
      return l.empty();
   }

   /**
    * Determines if it is possible to {@link #advance()} in this List. Returns
    * true, when the last position of the List has been reached. An
    * {@link #empty()} List will always deliver true
    *
    * @return true, if the last Entry in this List has been reached
    *         
    */
   public boolean endpos() {
      return l.endpos();
   }

   /**
    * Returns to the beginning of this List.
    */
   public void reset() {
      l.reset();
   }

   /**
    * Advances one step in this List.
    *
    * @throws RuntimeExcpetion
    *            if the last Entry of this List has been reached.
    */
   public void advance() {
      l.advance();
   }

   /**
    * Returns the actual element of this List.
    *
    * @return the actual element
    *
    * @throws RuntimeException
    *            if the last Entry of this List has been reached.
    */
   public A elem() {
      return (A) l.elem();
   }

   /**
    * Inserts object in this List. It will be placed before the actual
    * element. After insertion the inserted element will become the actual
    * element.
    *
    * @param x the element to be inserted
    *           
    */
   public void add(A x) {
      l.add(x);
   }

   /**
    * Deletes the actual element of this List. The element after the actual
    * element will become the new actual element.
    *
    * @throws RuntimeExcpetion if the last Entry of this List has been reached.
    *            
    */
   public void delete() {
      l.delete();
   }

   /**
    * @return a clone of this interface
    * @throws CloneNotSupportedException - if the object's class does not support
    * the Cloneable interface. Subclasses that override the clone method can also throw 
    * this exception to indicate that an instance cannot be cloned.
    */
   public ListGeneric clone(){
      try {
         return (ListGeneric) super.clone();
      } catch (CloneNotSupportedException e) {
         e.printStackTrace();
         return null;
      }

   }
}
